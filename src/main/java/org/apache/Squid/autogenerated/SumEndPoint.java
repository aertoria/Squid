package org.apache.Squid.autogenerated;

import com.google.protobuf.RpcCallback;
import com.google.protobuf.RpcController;
import com.google.protobuf.Service;
import org.apache.Squid.autogenerated.Sum;
import org.apache.hadoop.hbase.Cell;
import org.apache.hadoop.hbase.CellUtil;
import org.apache.hadoop.hbase.Coprocessor;
import org.apache.hadoop.hbase.CoprocessorEnvironment;
import org.apache.hadoop.hbase.client.Scan;
import org.apache.hadoop.hbase.coprocessor.CoprocessorService;
import org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment;
import org.apache.hadoop.hbase.regionserver.InternalScanner;
import org.apache.hadoop.hbase.util.Bytes;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class SumEndPoint extends Sum.SumService implements Coprocessor, CoprocessorService{
    private RegionCoprocessorEnvironment env;//A env per table

    public void getSum(RpcController controller, Sum.SumRequest request,
            RpcCallback<Sum.SumResponse> done) {
        //AT HREGION SIDE
        Scan scan= new Scan();
        scan.addFamily(Bytes.toBytes(request.getFamily()));
        scan.addColumn(Bytes.toBytes(request.getFamily()),Bytes.toBytes(request.getColumn()));

        Sum.SumResponse response=null;
        InternalScanner internalScanner = null;

        try{
            internalScanner = env.getRegion().getScanner(scan);
            List internalResults = new ArrayList();

            boolean hasmore = false;
            long sum = 0L;
            do{
                hasmore = internalScanner.next(internalResults);
                for(Object cell:internalResults){
                    sum+=10L;//Add 10 for every cell scanned
                    System.out.println("scanned cell"+cell.toString());
                }
                internalResults.clear();
            }while(hasmore);

            response = Sum.SumResponse.newBuilder().setSum(sum).build();

        }catch(IOException e){

        }finally {
            if(internalScanner!=null){
                try{
                    internalScanner.close();
                }catch (IOException ignored){}
            }
        }
        done.run(response);//Push result back to rpc
    }

    public void start(CoprocessorEnvironment env) throws IOException {
        this.env = (RegionCoprocessorEnvironment) env; //Set state
    }

    public void stop(CoprocessorEnvironment env) throws IOException {
        //DO dothing
    }

    @Override


    public Service getService() {
        return this;
    }
}
